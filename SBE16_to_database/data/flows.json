[
    {
        "id": "3722000.5fe76",
        "type": "tab",
        "label": "Parse to json",
        "disabled": false,
        "info": ""
    },
    {
        "id": "629f0c36.f7f324",
        "type": "tab",
        "label": "json to databases",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3a2a1bea.131384",
        "type": "tab",
        "label": "to mqtt",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e6164d1a.fdb35",
        "type": "tab",
        "label": "to file",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8dbffc56.01a58",
        "type": "mqtt-broker",
        "name": "OLD mosca mqtt port 1683",
        "broker": "172.19.0.1",
        "port": "1683",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "7cd5660f.93a7b8",
        "type": "mqtt-broker",
        "name": "NEW Mosquitto temp 1083",
        "broker": "172.19.0.1",
        "port": "1083",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "3f018bcf.a82724",
        "type": "postgresDB",
        "name": "Postgres from settings.js",
        "host": "${POSTGRES_HOST}",
        "hostFieldType": "str",
        "port": "${POSTGRES_PORT}",
        "portFieldType": "num",
        "database": "${POSTGRES_DATABASE}",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "max": "1",
        "maxFieldType": "num",
        "min": "1",
        "minFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "",
        "connectionTimeoutFieldType": "num",
        "user": "${POSTGRES_USER}",
        "userFieldType": "str",
        "password": "${POSTGRES_PWD}",
        "passwordFieldType": "str"
    },
    {
        "id": "266cbfe8.15f78",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "a676d99.b4f1e28",
        "type": "Kafka Broker",
        "name": "broker from settings.js",
        "hosts": [
            {
                "host": "${KAFKA_BROKER_HOST}",
                "port": 29092
            }
        ],
        "hostsEnvVar": "",
        "connectTimeout": "10000",
        "requestTimeout": "30000",
        "autoConnect": "true",
        "idleConnection": "5",
        "reconnectOnIdle": "true",
        "maxAsyncRequests": "10",
        "checkInterval": "10",
        "selfSign": true,
        "usetls": false,
        "useCredentials": false
    },
    {
        "id": "3faf9b76.4621f4",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "SQL Server from settings.js",
        "server": "${SQLSERVER_SERVER}",
        "port": "${SQLSERVER_PORT}",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "${SQLSERVER_DATABASE}",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "15000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true
    },
    {
        "id": "df8c0b88.91b0a8",
        "type": "MSSQL-CN",
        "name": "Dev",
        "server": "localhost",
        "encyption": false,
        "database": "Dev"
    },
    {
        "id": "712b53e5.990dfc",
        "type": "mqtt-broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "NodeRedSQLClient",
        "usetls": false,
        "compatmode": true,
        "keepalive": "15",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "3a926056.28e34",
        "type": "csv",
        "z": "3722000.5fe76",
        "name": "split fields",
        "sep": "|",
        "hdrin": "",
        "hdrout": "",
        "multi": "one",
        "ret": "\\n",
        "temp": "mi_timestamp,instrument_id,ctd",
        "skip": 0,
        "strings": true,
        "x": 245,
        "y": 279,
        "wires": [
            [
                "aa2eedb5.6238c"
            ]
        ]
    },
    {
        "id": "aa2eedb5.6238c",
        "type": "switch",
        "z": "3722000.5fe76",
        "name": "take ctd data",
        "property": "payload.ctd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^\\s*[0-9].*",
                "vt": "str",
                "case": true
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 544,
        "y": 318,
        "wires": [
            [
                "2fea6077.dcd2a"
            ]
        ]
    },
    {
        "id": "2fea6077.dcd2a",
        "type": "function",
        "z": "3722000.5fe76",
        "name": "parse ctd data string",
        "func": "var parts = msg.payload.ctd.trim().split(\",\");\n    if(parts.length < 6){\n      //error.write(records[i],\"not enough fields\");\n      return null;\n    }\n\t\nvar time =  msg.payload.mi_timestamp;\nvar instrument_id = msg.payload.instrument_id.trim();\nvar raw = msg.payload.ctd.trim();\nvar temp = parseFloat(parts[0]);\nvar cond =  parseFloat(parts[1]);\nvar dissolved_oxygen_ppm = parseFloat(parts[2]);\nvar sal = parseFloat(parts[3]);\nvar soundv = parseFloat(parts[4]);\nvar ttime = (String(parts[5]) + String(parts[6])).trim();\nvar newMsg = {\n       payload: {\n\t    time: time,\n\t\tinstrument_id: instrument_id,\n\t\traw: raw,\n\t\ttemp: temp,\n\t\tcond: cond,\n\t\tdissolved_oxygen_ppm: dissolved_oxygen_ppm,\n\t\tsal: sal,\n\t\tsoundv: soundv,\n\t\tttime: ttime\n\t   }\n    };\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 756,
        "y": 209,
        "wires": [
            [
                "d5eb0758.798d68"
            ]
        ]
    },
    {
        "id": "d5eb0758.798d68",
        "type": "function",
        "z": "3722000.5fe76",
        "name": "Stringify json",
        "func": "var payload = JSON.stringify(msg.payload);\nmsg.payload = payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1025,
        "y": 205,
        "wires": [
            [
                "d34f44ca.d8d708"
            ]
        ]
    },
    {
        "id": "4971e592.666d6c",
        "type": "json",
        "z": "629f0c36.f7f324",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 117.5,
        "y": 274,
        "wires": [
            [
                "9989808e.dbd2d"
            ]
        ]
    },
    {
        "id": "d34f44ca.d8d708",
        "type": "Kafka Producer",
        "z": "3722000.5fe76",
        "name": "kafka:to json from settings.js",
        "broker": "a676d99.b4f1e28",
        "topic": "${KAFKA_PRODUCER_TOPIC}",
        "topicSlash2dot": false,
        "requireAcks": 1,
        "ackTimeoutMs": 100,
        "partitionerType": 0,
        "key": "",
        "partition": 0,
        "attributes": 0,
        "connectionType": "Producer",
        "x": 1207,
        "y": 317,
        "wires": []
    },
    {
        "id": "3332f429.37723c",
        "type": "Kafka Consumer",
        "z": "629f0c36.f7f324",
        "name": "kafka:ctd-json from settings.js",
        "broker": "a676d99.b4f1e28",
        "regex": false,
        "topics": [
            {
                "topic": "${KAFKA_PRODUCER_TOPIC}",
                "offset": 0,
                "partition": 0
            },
            {
                "topic": "moxa-nodered-json",
                "offset": 0,
                "partition": 0
            }
        ],
        "groupId": "noderedctd01",
        "autoCommit": "true",
        "autoCommitIntervalMs": 5000,
        "fetchMaxWaitMs": 100,
        "fetchMinBytes": 1,
        "fetchMaxBytes": 1048576,
        "fromOffset": 0,
        "encoding": "utf8",
        "keyEncoding": "utf8",
        "connectionType": "Consumer",
        "convertToJson": false,
        "x": 165.5,
        "y": 69,
        "wires": [
            [
                "4971e592.666d6c"
            ]
        ]
    },
    {
        "id": "bb244523.2f8a68",
        "type": "Kafka Consumer",
        "z": "3722000.5fe76",
        "name": "kafka consumer from settings.js ",
        "broker": "a676d99.b4f1e28",
        "regex": false,
        "topics": [
            {
                "topic": "${KAFKA_CONSUMER_TOPIC}",
                "offset": 0,
                "partition": 0
            },
            {
                "topic": "moxa-nodered",
                "offset": 0,
                "partition": 0
            }
        ],
        "groupId": "noderedctd01",
        "autoCommit": "true",
        "autoCommitIntervalMs": 5000,
        "fetchMaxWaitMs": 100,
        "fetchMinBytes": 1,
        "fetchMaxBytes": 1048576,
        "fromOffset": 0,
        "encoding": "utf8",
        "keyEncoding": "utf8",
        "connectionType": "Consumer",
        "convertToJson": false,
        "x": 115.5,
        "y": 151,
        "wires": [
            [
                "3a926056.28e34"
            ]
        ]
    },
    {
        "id": "a7aa4b88.a6ffe8",
        "type": "Kafka Consumer Group",
        "z": "3a2a1bea.131384",
        "name": "kafka:spiddal-ctd",
        "broker": "2eda56d3.f62eba",
        "groupId": "noderedctd-spiddal-ctd",
        "sessionTimeout": 15000,
        "protocol": [
            "roundrobin"
        ],
        "encoding": "utf8",
        "fromOffset": "latest",
        "commitOffsetsOnFirstJoin": "true",
        "outOfRangeOffset": "latest",
        "topics": [
            "spiddal-ctd"
        ],
        "x": 198.5,
        "y": 127,
        "wires": [
            []
        ]
    },
    {
        "id": "b9b28179.6db8b",
        "type": "Kafka Consumer Group",
        "z": "3a2a1bea.131384",
        "name": "kafka:ctd-json",
        "broker": "2eda56d3.f62eba",
        "groupId": "noderedctd-spiddal-ctd",
        "sessionTimeout": 15000,
        "protocol": [
            "roundrobin"
        ],
        "encoding": "utf8",
        "fromOffset": "latest",
        "commitOffsetsOnFirstJoin": "true",
        "outOfRangeOffset": "latest",
        "topics": [
            "${KAFKA_PRODUCER_TOPIC}"
        ],
        "x": 207,
        "y": 224,
        "wires": [
            []
        ]
    },
    {
        "id": "a30da05b.f391c",
        "type": "mqtt out",
        "z": "3a2a1bea.131384",
        "name": "mqtt:spiddal-ctd",
        "topic": "spiddal-ctd",
        "qos": "1",
        "retain": "false",
        "broker": "7cd5660f.93a7b8",
        "x": 587.5,
        "y": 119,
        "wires": []
    },
    {
        "id": "84d9fc65.ba9a4",
        "type": "mqtt out",
        "z": "3a2a1bea.131384",
        "name": "mqtt:spiddal-ctd-json",
        "topic": "spiddal-ctd-json",
        "qos": "1",
        "retain": "false",
        "broker": "7cd5660f.93a7b8",
        "x": 609,
        "y": 212,
        "wires": []
    },
    {
        "id": "60d705f5.3cd91c",
        "type": "comment",
        "z": "3a2a1bea.131384",
        "name": "TODO",
        "info": "Change the published mqtt port when mosquitto goes to production",
        "x": 223.5,
        "y": 55,
        "wires": []
    },
    {
        "id": "61c906b3.cc0948",
        "type": "function",
        "z": "3a2a1bea.131384",
        "name": "Add a white space for smartbay widget",
        "func": "//TODO get smartbay fixed and remove this\nvar parts = msg.payload.split('|');\nparts[2] = \" \"+parts[2];\nmsg.payload = parts.join('|');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 518,
        "y": 62,
        "wires": [
            []
        ]
    },
    {
        "id": "d6df1592.bc1c88",
        "type": "function",
        "z": "e6164d1a.fdb35",
        "name": "Assign topic as year-month-day|device_id",
        "func": "let [timestamp,device_id] = msg.payload.split(\"|\");\nlet date = timestamp.substring(0,10);\nmsg.topic = date+\"|\"+device_id;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 517,
        "y": 407,
        "wires": [
            [
                "71c8a59a.c4016c"
            ]
        ]
    },
    {
        "id": "71c8a59a.c4016c",
        "type": "batcher",
        "z": "e6164d1a.fdb35",
        "name": "Batch for 2 minutes",
        "maxTopics": 1,
        "maxMessagesPerTopic": "100000",
        "maxDelay": "120000",
        "x": 669.5,
        "y": 213,
        "wires": [
            [
                "baa6083b.a93138"
            ]
        ]
    },
    {
        "id": "baa6083b.a93138",
        "type": "function",
        "z": "e6164d1a.fdb35",
        "name": "Assign filename",
        "func": "let [date,device_id] = msg.topic.split(\"|\");\nlet [year,month,day] = date.split(\"-\");\nlet filename = `/data/synology/serialdata/ctds/${device_id}/${year}/${device_id}_${year}${month}${day}.txt`\nmsg.filename = filename;\nmsg.payload = msg.payload.join(\"\\n\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 837.5,
        "y": 369,
        "wires": [
            [
                "104f49b7.32b3c6"
            ]
        ]
    },
    {
        "id": "104f49b7.32b3c6",
        "type": "file",
        "z": "e6164d1a.fdb35",
        "name": "Write ctd txt file",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 937.5,
        "y": 245,
        "wires": [
            []
        ]
    },
    {
        "id": "ed31688f.c3c778",
        "type": "switch",
        "z": "e6164d1a.fdb35",
        "name": "Skip data before 2020-09-10",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "2020-09-10",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 361,
        "y": 303,
        "wires": [
            [
                "ddfa69af.e44dd8"
            ]
        ]
    },
    {
        "id": "e72a2034.c1d4f",
        "type": "Kafka Consumer Group",
        "z": "e6164d1a.fdb35",
        "name": "kafka spiddal-ctd",
        "broker": "2eda56d3.f62eba",
        "groupId": "noderedctd2file02",
        "sessionTimeout": 15000,
        "protocol": [
            "roundrobin"
        ],
        "encoding": "utf8",
        "fromOffset": "earliest",
        "commitOffsetsOnFirstJoin": "true",
        "outOfRangeOffset": "latest",
        "topics": [
            "${KAFKA_CONSUMER_TOPIC}"
        ],
        "x": 232,
        "y": 189,
        "wires": [
            []
        ]
    },
    {
        "id": "ddfa69af.e44dd8",
        "type": "function",
        "z": "e6164d1a.fdb35",
        "name": "Remove non-printable characters",
        "func": "msg.payload = msg.payload.replace(/[^\\x20-\\x7E]/g, \"\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 441,
        "y": 354,
        "wires": [
            [
                "d6df1592.bc1c88"
            ]
        ]
    },
    {
        "id": "2ab91264.b5bafe",
        "type": "postgrestor",
        "z": "629f0c36.f7f324",
        "name": "Insert to TimescaleDB",
        "query": "{{ msg.query }};",
        "postgresDB": "3f018bcf.a82724",
        "output": true,
        "outputs": 1,
        "x": 540,
        "y": 560,
        "wires": [
            [
                "417697a1.4683d8"
            ]
        ]
    },
    {
        "id": "9989808e.dbd2d",
        "type": "function",
        "z": "629f0c36.f7f324",
        "name": "Convert to SQL",
        "func": "var fields = [\"instrument_id\",\n\"time\",\n\"temp\",\n\"cond\",\n\"dissolved_oxygen_ppm\",\n\"sal\",\n\"soundv\", \n\"ttime\"\n];\nvar field_names = fields.join(\",\");\nvar values = [];\nfor(var i=0;i<fields.length;i++){\n    values.push(msg.payload[fields[i]]);\n    fields[i] = \"$\"+(i+1);\n}\nvar placeholders = fields.join(\",\");\n\nvar query = \"INSERT INTO ctd_sbe16plus_data (\"+field_names+\") values (\"+placeholders+\")\";\nmsg.query = query,\nmsg.params = values\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 444,
        "wires": [
            [
                "e7e3aed1.cf34e",
                "2ab91264.b5bafe"
            ]
        ]
    },
    {
        "id": "417697a1.4683d8",
        "type": "debug",
        "z": "629f0c36.f7f324",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 520,
        "wires": []
    },
    {
        "id": "e7e3aed1.cf34e",
        "type": "MSSQL",
        "z": "629f0c36.f7f324",
        "mssqlCN": "3faf9b76.4621f4",
        "name": "sql server insert",
        "outField": "payload",
        "returnType": "1",
        "throwErrors": 1,
        "query": "INSERT INTO [ctd_sbe16plus_data] (instrument_id,time,temp,cond,dissolved_oxygen_ppm,sal,soundv,ttime) \r\nvalues (@instrument_id,\r\n@time,\r\n@temp,\r\n@cond,\r\n@dissolved_oxygen_ppm,\r\n@sal,\r\n@soundv,\r\n@ttime);\r\n",
        "modeOpt": "",
        "modeOptType": "query",
        "queryOpt": "",
        "queryOptType": "editor",
        "paramsOpt": "",
        "paramsOptType": "editor",
        "rows": "rows",
        "rowsType": "msg",
        "params": [
            {
                "output": false,
                "name": "instrument_id",
                "type": "VarChar(50)",
                "valueType": "msg",
                "value": "params[0]",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "time",
                "type": "DateTime",
                "valueType": "msg",
                "value": "params[1]",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "temp",
                "type": "Float",
                "valueType": "msg",
                "value": "params[2]",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "cond",
                "type": "float",
                "valueType": "msg",
                "value": "params[3]",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "dissolved_oxygen_ppm",
                "type": "float",
                "valueType": "msg",
                "value": "params[4]",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "sal",
                "type": "float",
                "valueType": "msg",
                "value": "params[5]",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "soundv",
                "type": "float",
                "valueType": "msg",
                "value": "params[6]",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            },
            {
                "output": false,
                "name": "ttime",
                "type": "DateTime",
                "valueType": "msg",
                "value": "params[7]",
                "options": {
                    "nullable": true,
                    "primary": false,
                    "identity": false,
                    "readOnly": false
                }
            }
        ],
        "x": 680,
        "y": 400,
        "wires": [
            []
        ]
    }
]